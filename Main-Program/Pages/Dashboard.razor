@page "/dashboard"

@layout MainLayout
@inject HttpClient HttpHandler
@inject DatabaseAccountrix _DatabaseLogic
@using App_Classes
@using System.Linq

<div class="transaction-page" style="display: flex; flex-direction: column; align-items: center; padding: 2em;">
    <!-- Donut Chart Section -->
    <MudPaper Class="pa-4" Style="background-color: #1e1e2d; border-radius: 25px; width: 520px;">
        <MudText Typo="Typo.h6" Style="color: #ffffff; text-align: center; margin-bottom: 1em;">
            Income vs Expense Overview
        </MudText>
        <MudDivider />
        <MudChart ChartType="ChartType.Donut" Width="500px" Height="500px" InputData="@_dashboard_data.Income_Expense_Data" InputLabels="@_dashboard_data.datalabels" />
    </MudPaper>

    <!-- Total Revenue and Expense Section -->
    <MudPaper Class="pa-4" Style="background-color: #1e1e2d; border-radius: 25px; width: 520px; text-align: center; margin-top: 15px">
        <MudText Typo="Typo.h6" Style="color: #ffffff; margin-bottom: 1em;">Summary</MudText>
        <MudDivider />
        <MudGrid Style="margin-top: 1em;" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudItem xs="6">
                <MudText Typo="Typo.h6" Style="color: #00d062; font-family: 'Roboto', sans-serif; font-weight: bold;">Total Revenue</MudText>
                <MudText Typo="Typo.h5" Style="color: #00d062; font-family: 'Roboto', sans-serif; font-weight: bold;">$ @_userIncome.total_income</MudText>
            </MudItem>
            <MudItem xs="6">
                <MudText Typo="Typo.h6" Style="color: #f10c45; font-family: 'Roboto', sans-serif; font-weight: bold;">Total Expense</MudText>
                <MudText Typo="Typo.h5" Style="color: #f10c45; font-family: 'Roboto', sans-serif; font-weight: bold;">$ @_userExpense.total_expense</MudText>
            </MudItem>
        </MudGrid>
    </MudPaper>
</div>
@code {
    //IQueryable act as model of data for display or sort
    IQueryable<UserTransaction> datalist = null;
    DatabaseAccountrix _databaseLogic = new DatabaseAccountrix();
    TransactionList ListOfIncome = new TransactionList(); //contains all positive amount for total_income calculation
    TransactionList ListOfExpense = new TransactionList();
    DashboardData _dashboard_data = new DashboardData();
    Income _userIncome = new Income();
    Expense _userExpense = new Expense();


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            //List of UserTransaction object to store the data retrieved from firebase 
            List<UserTransaction> ListOfTransactions = await HttpHandler.GetFromJsonAsync<List<UserTransaction>>("/transactions");
            _databaseLogic.tmp_trans.Transactions = ListOfTransactions; //access the TransactionList object named tmp_trans in _databaselogic which contain Transacton [a list of UserTransaction object] 
            datalist = ListOfTransactions.AsQueryable();
            _databaseLogic.tmp_trans.DisplayTransactionHistory();
            //store all transaction_amount > 0 as income in a IQueryable list for further use.
            //use system linq functions to find the transaction amount > 0 == income and store in list //a delegate called predicate, it tests every element in the IQueryable list to see which satisfies the condition mentioned 
            IQueryable<UserTransaction> QueryableListOfPositiveTransaction = datalist.Where(transaction => transaction.amount > 0); //if the element in the IQueryable list satisfies the condition, element will be returned
            //implicit conversion
            ListOfIncome.Transactions = QueryableListOfPositiveTransaction.ToList();
            //compute total income
            _userIncome.total_income = ListOfIncome.getTotalRevenue();
            Console.WriteLine(_userIncome.total_income);
            //use system linq functions to find the transaction amount <= 0 == expense and store in list
            IQueryable<UserTransaction> QueryableListOfNegativeTransction = datalist.Where(transactions => transactions.amount < 0);
            ListOfExpense.Transactions = QueryableListOfNegativeTransction.ToList();
            //compute total expense
            _userExpense.total_expense = ListOfExpense.getTotalExpense();
            Console.WriteLine(_userExpense.total_expense);

            //add computed data into array for display
            _dashboard_data.Income_Expense_Data = new [] 
            { _userIncome.total_income, 
              _userExpense.total_expense 
            };

        }
        catch (NullReferenceException)
        {
            Console.WriteLine("No transactions");
        }
    }
}
